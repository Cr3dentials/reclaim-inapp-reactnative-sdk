model HttpProvider {
  id                      String                              @id @default(auto()) @map("_id") @db.ObjectId
  httpProviderId          String                              @unique
  name                    String
  logoUrl                 String
  # The url that the user will be redirected to when verification starts.
  url                     String
  urlType                 urlType?
  method                  RequestMethodType                   @default(GET)
  body                    String?
  # The url that is likely the login url address of the website used by the provider.
  loginUrl                String
  customInjection         String?
  bodySniff               BodySniff?
  userAgent               UserAgentSettings?
  geoLocation             String?
  matchType               String?                             @default("greedy")
  injectionType           InjectionType                       @default(MSWJS)
  disableRequestReplay    Boolean                             @default(false)
  providerHash            String?
  additionalClientOptions AdditionalClientOptions?
  verificationType        VerificationType?                   @default(WITNESS)
  expectedPageUrl         String?
  pageTitle               String?
  requestData             RequestData[]
}

type AdditionalClientOptions {
  supportedProtocolVersions TLSVersion[]
}

enum TLSVersion {
  TLS1_2
  TLS1_3
}

enum InjectionType {
  MSWJS
  NONE
}

type BodySniff {
  enabled  Boolean?
  regex    String?
  template String?
}

type UserAgentSettings {
  ios     String?
  android String?
}

enum urlType {
  REGEX
  CONSTANT
  TEMPLATE
}

type RequestData {
  url                String
  expectedPageUrl    String?
  urlType            urlType
  method             RequestMethodType
  responseMatches    ResponseMatch[]
  responseRedactions ResponseRedaction[]
  bodySniff          BodySniff?
  # A unique hash of the request data
  requestHash        String
}

enum RequestMethodType {
  GET
  POST
}

type ResponseMatch {
  value       String
  type        String
  invert      Boolean @default(false)
  description String?
}

type ResponseRedaction {
  xPath    String?
  jsonPath String?
  regex    String?
  hash     String?
}
